#include <LiquidCrystal_I2C.h>
#include <DHT.h>

// Defini√ß√£o dos pinos
#define TRIG_PIN 7        // Pino Trigger do HC-SR04
#define ECHO_PIN 6        // Pino Echo do HC-SR04
#define RAIN_SENSOR A0    // Pino anal√≥gico do potenci√¥metro (sensor de chuva)
#define DHT_PIN 2         // Pino do sensor DHT22
#define DHT_TYPE DHT22    // Tipo do sensor DHT

#define LED_VERDE 13      // LED indicador seguro
#define LED_AMARELO 12    // LED indicador aten√ß√£o
#define LED_VERMELHO 11   // LED indicador perigo
#define BUZZER 10         // Buzzer para alarme

// Inicializa√ß√£o dos componentes
LiquidCrystal_I2C lcd(0x27, 16, 2);  // Display LCD I2C
DHT dht(DHT_PIN, DHT_TYPE);          // Sensor DHT22

// Vari√°veis globais
float distancia_agua = 0;     // Dist√¢ncia medida pelo ultrass√¥nico (cm)
int nivel_chuva = 0;          // Valor do potenci√¥metro (0-1023)
float umidade = 0;            // Umidade do ar (%)
float temperatura = 0;        // Temperatura (¬∞C)

// Constantes para calibra√ß√£o
const float ALTURA_MAXIMA = 200.0;    // Altura m√°xima do sensor ao solo (cm)
const float NIVEL_ATENCAO = 150.0;    // N√≠vel de aten√ß√£o (cm do sensor)
const float NIVEL_PERIGO = 100.0;     // N√≠vel de perigo (cm do sensor)

// Calibra√ß√£o do potenci√¥metro como sensor de chuva
// Valores MAIORES = MAIS chuva (girando o potenci√¥metro no sentido hor√°rio)
const int CHUVA_INTENSA = 700;        // Valor para chuva intensa (potenci√¥metro > 700)
const int CHUVA_MODERADA = 400;       // Valor para chuva moderada (potenci√¥metro > 400)

// Estados do sistema
enum EstadoSistema {
  SEGURO,
  ATENCAO,
  PERIGO
};

EstadoSistema estado_atual = SEGURO;
unsigned long ultimo_alerta = 0;
const unsigned long INTERVALO_ALERTA = 2000; // Intervalo entre alertas (ms)

void setup() {
  Serial.begin(9600);
  
  // Inicializa√ß√£o do LCD
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Sistema Anti-");
  lcd.setCursor(0, 1);
  lcd.print("Enchente v1.0");
  delay(2000);
  lcd.clear();
  
  // Inicializa√ß√£o do DHT22
  dht.begin();
  
  // Configura√ß√£o dos pinos
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(RAIN_SENSOR, INPUT);
  pinMode(LED_VERDE, OUTPUT);
  pinMode(LED_AMARELO, OUTPUT);
  pinMode(LED_VERMELHO, OUTPUT);
  pinMode(BUZZER, OUTPUT);
  
  // Estado inicial - seguro
  digitalWrite(LED_VERDE, HIGH);
  digitalWrite(LED_AMARELO, LOW);
  digitalWrite(LED_VERMELHO, LOW);
  digitalWrite(BUZZER, LOW);
  
  Serial.println("=== Sistema de Monitoramento de Enchentes Iniciado ===");
  Serial.println("Monitorando: N√≠vel de √Ågua | Chuva | Umidade | Temperatura");
  Serial.println("POTENCI√îMETRO: Gire no sentido hor√°rio para simular mais chuva");
  Serial.println("==================================================");
}

void loop() {
  // Leitura dos sensores
  lerSensores();
  
  // An√°lise dos dados e determina√ß√£o do estado
  analisarCondicoes();
  
  // Atualiza√ß√£o dos indicadores visuais e sonoros
  atualizarIndicadores();
  
  // Exibi√ß√£o no display LCD
  atualizarDisplay();
  
  // Envio de dados para Serial Monitor
  enviarDadosSerial();
  
  delay(1000); // Atualiza√ß√£o a cada segundo
}

void lerSensores() {
  // Leitura do sensor ultrass√¥nico (n√≠vel de √°gua)
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  
  long duracao = pulseIn(ECHO_PIN, HIGH);
  distancia_agua = duracao * 0.034 / 2; // Convers√£o para cm
  
  // Leitura do potenci√¥metro (simulando sensor de chuva)
  nivel_chuva = analogRead(RAIN_SENSOR);
  
  // Leitura do sensor DHT22
  umidade = dht.readHumidity();
  temperatura = dht.readTemperature();
  
  // Verifica√ß√£o de leituras v√°lidas do DHT22
  if (isnan(umidade) || isnan(temperatura)) {
    umidade = 0;
    temperatura = 0;
  }
}

void analisarCondicoes() {
  EstadoSistema novo_estado = SEGURO;
  
  // An√°lise do n√≠vel de √°gua (quanto menor a dist√¢ncia, maior o n√≠vel)
  if (distancia_agua <= NIVEL_PERIGO) {
    novo_estado = PERIGO;
  } else if (distancia_agua <= NIVEL_ATENCAO) {
    if (novo_estado < ATENCAO) novo_estado = ATENCAO;
  }
  
  // An√°lise da intensidade da chuva (potenci√¥metro)
  // Valores MAIORES indicam MAIS chuva
  if (nivel_chuva >= CHUVA_INTENSA) {
    novo_estado = PERIGO;
  } else if (nivel_chuva >= CHUVA_MODERADA) {
    if (novo_estado < ATENCAO) novo_estado = ATENCAO;
  }
  
  // An√°lise da umidade (umidade muito alta pode indicar chuva intensa)
  if (umidade >= 90) {
    if (novo_estado < ATENCAO) novo_estado = ATENCAO;
  }
  
  // Combina√ß√£o de fatores para estado de perigo
  if ((distancia_agua <= NIVEL_ATENCAO) && (nivel_chuva >= CHUVA_MODERADA) && (umidade >= 85)) {
    novo_estado = PERIGO;
  }
  
  estado_atual = novo_estado;
}

void atualizarIndicadores() {
  // Reset de todos os LEDs
  digitalWrite(LED_VERDE, LOW);
  digitalWrite(LED_AMARELO, LOW);
  digitalWrite(LED_VERMELHO, LOW);
  digitalWrite(BUZZER, LOW);
  
  unsigned long agora = millis();
  
  switch (estado_atual) {
    case SEGURO:
      digitalWrite(LED_VERDE, HIGH);
      break;
      
    case ATENCAO:
      digitalWrite(LED_AMARELO, HIGH);
      // Buzzer intermitente lento
      if ((agora - ultimo_alerta) >= INTERVALO_ALERTA) {
        digitalWrite(BUZZER, HIGH);
        delay(200);
        digitalWrite(BUZZER, LOW);
        ultimo_alerta = agora;
      }
      break;
      
    case PERIGO:
      digitalWrite(LED_VERMELHO, HIGH);
      // Buzzer intermitente r√°pido
      if ((agora - ultimo_alerta) >= (INTERVALO_ALERTA / 4)) {
        digitalWrite(BUZZER, HIGH);
        delay(100);
        digitalWrite(BUZZER, LOW);
        ultimo_alerta = agora;
      }
      break;
  }
}

void atualizarDisplay() {
  lcd.clear();
  
  // Primeira linha - Status e n√≠vel de √°gua
  lcd.setCursor(0, 0);
  switch (estado_atual) {
    case SEGURO:
      lcd.print("SEGURO ");
      break;
    case ATENCAO:
      lcd.print("ATENCAO ");
      break;
    case PERIGO:
      lcd.print("PERIGO! ");
      break;
  }
  
  float nivel_agua = ALTURA_MAXIMA - distancia_agua;
  lcd.print(nivel_agua, 1);
  lcd.print("cm");
  
  // Segunda linha - Chuva e umidade
  lcd.setCursor(0, 1);
  if (nivel_chuva >= CHUVA_INTENSA) {
    lcd.print("Chuva:FORTE ");
  } else if (nivel_chuva >= CHUVA_MODERADA) {
    lcd.print("Chuva:MOD ");
  } else {
    lcd.print("Chuva:FRACA ");
  }
  
  lcd.print(umidade, 0);
  lcd.print("%");
}

void enviarDadosSerial() {
  Serial.println("==================== DADOS ATUAIS ====================");
  Serial.print("Status do Sistema: ");
  
  switch (estado_atual) {
    case SEGURO:
      Serial.println("SEGURO ‚úì");
      break;
    case ATENCAO:
      Serial.println("ATEN√á√ÉO ‚ö†Ô∏è");
      break;
    case PERIGO:
      Serial.println("PERIGO! üö®");
      break;
  }
  
  float nivel_agua = ALTURA_MAXIMA - distancia_agua;
  Serial.print("N√≠vel de √Ågua: ");
  Serial.print(nivel_agua);
  Serial.println(" cm do solo");
  
  Serial.print("Dist√¢ncia do Sensor: ");
  Serial.print(distancia_agua);
  Serial.println(" cm");
  
  Serial.print("Potenci√¥metro (Chuva): ");
  Serial.print(nivel_chuva);
  Serial.print("/1023 ");
  if (nivel_chuva >= CHUVA_INTENSA) {
    Serial.println("(Chuva Forte)");
  } else if (nivel_chuva >= CHUVA_MODERADA) {
    Serial.println("(Chuva Moderada)");
  } else {
    Serial.println("(Sem chuva/Chuva fraca)");
  }
  
  Serial.print("Umidade do Ar: ");
  Serial.print(umidade);
  Serial.println("%");
  
  Serial.print("Temperatura: ");
  Serial.print(temperatura);
  Serial.println("¬∞C");
  
  Serial.println("=====================================================");
  Serial.println();
}